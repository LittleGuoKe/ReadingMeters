//-------------------Cut Image
		Mat cutImage1 = srcImage(Range(0, srcImage.rows / 2), Range(0, srcImage.cols / 2));
		Mat cutImage2 = srcImage(Range(0, srcImage.rows / 2), Range(srcImage.cols / 2 + 1, srcImage.cols));
		Mat cutImage3 = srcImage(Range(srcImage.rows / 2 + 1, srcImage.rows), Range(0, srcImage.cols / 2));
		Mat cutImage4 = srcImage(Range(srcImage.rows / 2 + 1, srcImage.rows), Range(srcImage.cols / 2 + 1, srcImage.cols));
		Mat dstImage1, dstImage2, dstImage3, dstImage4;

		dstImage1 = transformProcess(cutImage1, dstImage1);
		dstImage2 = transformProcess(cutImage2, dstImage2);
		dstImage3 = transformProcess(cutImage3, dstImage3);
		dstImage4 = transformProcess(cutImage4, dstImage4);

		Mat dstImageLeft = mergeRows(dstImage1,dstImage3);
		Mat dstImageRight = mergeRows(dstImage2, dstImage4);
		dstImage = mergeCols(dstImageLeft, dstImageRight);
		imwrite("4_merge.jpg", dstImage);
		


//--------------------convex
	vector<vector<Point>> g_vContours;
	vector<Vec4i> g_vHierarchy;
	findContours(dstImage, g_vContours, g_vHierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<vector<Point>> hull(g_vContours.size());
	for (unsigned int i = 0; i < g_vContours.size(); i++) {
	convexHull(Mat(g_vContours[i]), hull[i], false);
	}

	//Mat drawing = Mat::zeros(dstImage.size(), CV_8UC3);
	Mat drawing =biImage;
	RNG g_rng(12345);
	for (unsigned int i = 0; i < g_vContours.size(); i++) {
	Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
	drawContours(drawing, g_vContours, i, color, 1, 8, vector<Vec4i>(), 0, Point());
	drawContours(drawing, hull, i, color, 1, 8, vector<Vec4i>(), 0, Point());
	}
	


//--------------------Laplacian Edge
	Laplacian(dstImage, dstImage, CV_8U, LAP_FLITER_LEN);
	medianBlur(dstImage, dstImage, 11);
	imwrite("1_lap.jpg", dstImage);
	


//-------------------Image Binarization
	threshold(dstImage, dstImage, GREY_WHITE*0.24, GREY_WHITE, THRESH_BINARY);
	//medianBlur(dstImage, dstImage, 11);
	//adaptiveThreshold(dstImage, dstImage, GREY_WHITE, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY,
	//LAP_FLITER_LEN, 1);
	/*medianBlur(biImage, dstImage, 11);
	imwrite("3_bi.jpg", dstImage);
	//Mat biImage = dstImage;
	



################################## the Version of MatchMain before 2017/09/18 23:53
int MatchMain(char find_path[], char mode_path[], char store_path[])
{
	Mat g_findImage = imread(find_path);
	Mat modeImage = imread(mode_path);

	Mat findImage;
	g_findImage.copyTo(findImage);

	Mat dstImage;
	dstImage.create(findImage.rows - modeImage.rows + 1, findImage.cols - modeImage.cols + 1, CV_32FC1);

	//进行模版匹配，首先是方式0（平方差匹配法）  
	matchTemplate(findImage, modeImage, dstImage, 0);
	normalize(dstImage, dstImage, 0, 1, 32);
 
	//首先是从得到的 输出矩阵中得到 最大或最小值（平方差匹配方式是越小越好，所以在这种方式下，找到最小位置）  
	Point minPoint;
	minMaxLoc(dstImage, 0, 0, &minPoint, 0);

	//绘制  
	rectangle(findImage, minPoint, Point(minPoint.x + modeImage.cols, minPoint.y + modeImage.rows)
		, Scalar(theRNG().uniform(0, 255), theRNG().uniform(0, 255), theRNG().uniform(0, 255)), 3, 8);
	imwrite(store_path, findImage);

	if (minPoint.x < (findImage.cols / 3) && minPoint.y < (findImage.rows / 3))
		return 1;
	else
		return 0;
}




################################## the Version of getEdgelines before 2017/09/19 21:55
vector<vector<float>> getEdgelines(vector<vector<float>> edgelines, vector<Vec2f> lines, Mat srcImage, boolean pointer,char dst[]) {
	float rho_f = 0.0, theta_f = 0.0;
	for (size_t i = 0; i < lines.size(); i++) {
		float rho = lines[i][0], theta = lines[i][1];

		Point pt1, pt2;
		double a = cos(theta), b = sin(theta);
		double x0 = a*rho, y0 = b*rho;

		if (!pointer) { //对表盘找线
			//get out of nearby lines
			if (rho_f == 0.0 && theta_f == 0.0) {}
			else if (((rho_f*(1 + ADJACENT_COEFFICIENT_R)) >= rho && (rho_f*(1 - ADJACENT_COEFFICIENT_R)) <= rho)
				&& ((theta_f*(1 + ADJACENT_COEFFICIENT_T)) >= theta && (theta_f*(1 - ADJACENT_COEFFICIENT_T)) <= theta)) {
				//continue;
			}
			rho_f = rho; theta_f = theta;
			//get out of lines which is not frame
			if ((theta >(CV_PI / 24) && theta < ((11 * CV_PI) / 24)) ||
				(theta >(13 * CV_PI / 24) && theta < ((23 * CV_PI) / 24)))
				continue;
			//printf("\trho:%f,\ttheta:%f\n", rho, theta);
		} 
		else {      //对指针找线
			if ((((rho - a*srcImage.cols) / b) >= srcImage.rows || ((rho - a*srcImage.cols) / b) <= (srcImage.rows * 5 / 6))
				&& (((rho - b*srcImage.rows) / a) >= srcImage.cols || ((rho - b*srcImage.rows) / a) <= (srcImage.cols * 5 / 6)))
				continue;
		}
		
		//this part is drawing
		pt1.x = cvRound(x0 + HOUGH_LINE_LEN*(-b));
		pt1.y = cvRound(y0 + HOUGH_LINE_LEN*(a));
		pt2.x = cvRound(x0 - HOUGH_LINE_LEN*(-b));
		pt2.y = cvRound(y0 - HOUGH_LINE_LEN*(a));
		line(srcImage, pt1, pt2, Scalar(255, 255, 255), 1, 4);
		imwrite(dst, srcImage);

		//store the line which is qualified
		if (!pointer) {
			float type;
			if (theta <= (CV_PI / 24) || theta >= ((23 * CV_PI) / 24))
				type = 1.0;
			else
				type = 0.0;
			vector <float> linesinf;
			linesinf.push_back(rho); linesinf.push_back(theta); linesinf.push_back(type);
			edgelines.push_back(linesinf);
		}
		else {
			vector <float> linesinf;
			linesinf.push_back(rho); linesinf.push_back(theta);
			edgelines.push_back(linesinf);
		}
	}
	return edgelines;

}



*************************************    result : 2017/10/22  17:41



##########     ReadingMeters v0.0.9     ##########
##########  Last updating in 2017/10/22   ##########



There is only one meter in 1.jpg.
letter flag:(225, 191)
1.jpg-result: -0.00 A


There is only one meter in 2.jpg.
letter flag:(143, 121)
2.jpg-result: 397.50 V


There is only one meter in 3.jpg.
letter flag:(224, 180)
3.jpg-result: 0.00 A


There is only one meter in 4.jpg.
letter flag:(125, 121)
4.jpg-result: 395.00 V


There are 2 meters in 5.jpg.
letter flag:(227, 175)
5.jpg-result: -0.83 A


There is only one meter in 6.jpg.
letter flag:(225, 307)
6.jpg-result: 397.92 V

--------END--------