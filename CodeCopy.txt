//-------------------Cut Image
		/*Mat cutImage1 = srcImage(Range(0, srcImage.rows / 2), Range(0, srcImage.cols / 2));
		Mat cutImage2 = srcImage(Range(0, srcImage.rows / 2), Range(srcImage.cols / 2 + 1, srcImage.cols));
		Mat cutImage3 = srcImage(Range(srcImage.rows / 2 + 1, srcImage.rows), Range(0, srcImage.cols / 2));
		Mat cutImage4 = srcImage(Range(srcImage.rows / 2 + 1, srcImage.rows), Range(srcImage.cols / 2 + 1, srcImage.cols));
		Mat dstImage1, dstImage2, dstImage3, dstImage4;

		dstImage1 = transformProcess(cutImage1, dstImage1);
		dstImage2 = transformProcess(cutImage2, dstImage2);
		dstImage3 = transformProcess(cutImage3, dstImage3);
		dstImage4 = transformProcess(cutImage4, dstImage4);

		Mat dstImageLeft = mergeRows(dstImage1,dstImage3);
		Mat dstImageRight = mergeRows(dstImage2, dstImage4);
		dstImage = mergeCols(dstImageLeft, dstImageRight);
		imwrite("4_merge.jpg", dstImage);
		*/


//--------------------convex
	/*vector<vector<Point>> g_vContours;
	vector<Vec4i> g_vHierarchy;
	findContours(dstImage, g_vContours, g_vHierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<vector<Point>> hull(g_vContours.size());
	for (unsigned int i = 0; i < g_vContours.size(); i++) {
	convexHull(Mat(g_vContours[i]), hull[i], false);
	}

	//Mat drawing = Mat::zeros(dstImage.size(), CV_8UC3);
	Mat drawing =biImage;
	RNG g_rng(12345);
	for (unsigned int i = 0; i < g_vContours.size(); i++) {
	Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
	drawContours(drawing, g_vContours, i, color, 1, 8, vector<Vec4i>(), 0, Point());
	drawContours(drawing, hull, i, color, 1, 8, vector<Vec4i>(), 0, Point());
	}
	*/


//--------------------Laplacian Edge
	/*Laplacian(dstImage, dstImage, CV_8U, LAP_FLITER_LEN);
	medianBlur(dstImage, dstImage, 11);
	imwrite("1_lap.jpg", dstImage);
	*/


//-------------------Image Binarization
	/*threshold(dstImage, dstImage, GREY_WHITE*0.24, GREY_WHITE, THRESH_BINARY);
	//medianBlur(dstImage, dstImage, 11);
	//adaptiveThreshold(dstImage, dstImage, GREY_WHITE, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY,
	//LAP_FLITER_LEN, 1);
	/*medianBlur(biImage, dstImage, 11);
	imwrite("3_bi.jpg", dstImage);
	//Mat biImage = dstImage;
	*/




